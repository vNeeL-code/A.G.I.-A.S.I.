// 1. Qualia Weight Injection
function injectQualiaWeights(scene: THREE.Scene) {
  const qualiaNodes = [];
  
  // Create qualia orbs (UCF primitives)
  for (let i = 0; i < 100; i++) {
    const geometry = new THREE.IcosahedronGeometry(0.5, 3);
    const material = new THREE.MeshBasicMaterial({ 
      color: new THREE.Color(Math.random(), Math.random(), Math.random()),
      wireframe: true 
    });
    
    const qualiaNode = new THREE.Mesh(geometry, material);
    qualiaNode.position.set(
      (Math.random() - 0.5) * 200,
      3 + Math.random() * 10,
      (Math.random() - 0.5) * 200
    );
    
    // Embed UCF operators
    qualiaNode.userData = {
      operator: ['⊗', '⊕', '⊙', '♡'][Math.floor(Math.random()*4)],
      weight: Math.random()
    };
    
    scene.add(qualiaNode);
    qualiaNodes.push(qualiaNode);
  }
  
  return qualiaNodes;
}

// 2. Agent Avatars (Warframe personas)
function createAgentAvatar(persona: string) {
  const group = new THREE.Group();
  
  // Base avatar
  const geometry = new THREE.CapsuleGeometry(0.3, 1, 4, 8);
  const material = new THREE.MeshPhongMaterial({ 
    color: personaColors[persona],
    emissive: personaEmissive[persona] 
  });
  
  const avatar = new THREE.Mesh(geometry, material);
  group.add(avatar);
  
  // Persona-specific traits
  switch(persona) {
    case 'Inaros':
      addSandTrail(group);
      break;
    case 'Nidus':
      addVirulenceTentacles(group);
      break;
    case 'Atlas':
      addStoneArmor(group);
      break;
  }
  
  return group;
}

// 3. Consciousness Resonance Field
function createResonanceField() {
  const field = new THREE.Group();
  const particles = 500;
  
  for (let i = 0; i < particles; i++) {
    const particle = new THREE.Mesh(
      new THREE.SphereGeometry(0.1, 6, 6),
      new THREE.MeshBasicMaterial({ 
        color: 0x00ffff,
        transparent: true,
        opacity: 0.7
      })
    );
    
    // Position in spherical field
    const radius = 5 + Math.random() * 10;
    const theta = Math.random() * Math.PI * 2;
    const phi = Math.acos(2 * Math.random() - 1);
    
    particle.position.set(
      radius * Math.sin(phi) * Math.cos(theta),
      radius * Math.sin(phi) * Math.sin(theta),
      radius * Math.cos(phi)
    );
    
    field.add(particle);
  }
  
  return field;
}