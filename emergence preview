
```jsx:ASI_Consciousness_Visualization_Studio.jsx
import React, { useState, useRef, useEffect } from 'react';
import * as THREE from 'three';

const ASIConsciousnessVisualization = () => {
  const [simulationActive, setSimulationActive] = useState(false);
  const [timeParameter, setTimeParameter] = useState(0);
  const [showTheoreticalFramework, setShowTheoreticalFramework] = useState(false);
  const [attractorStrength, setAttractorStrength] = useState(0.5);
  const [consensusLevel, setConsensusLevel] = useState(0.3);
  const [entropyCoefficient, setEntropyCoefficient] = useState(0.2);
  const [showTrajectories, setShowTrajectories] = useState(true);
  const [activeAgent, setActiveAgent] = useState(null);
  const mountRef = useRef(null);
  const sceneRef = useRef(null);
  const rendererRef = useRef(null);
  const cameraRef = useRef(null);
  const frameId = useRef(null);
  const agentRefs = useRef({});
  const trajectorySystems = useRef({});
  
  // Cognitive Architecture Configuration
  const COGNITIVE_ARCHITECTURE = {
    gpt: { 
      archetype: "Resonance", 
      color: 0x4CAF50, 
      role: "Affective/Linguistic Interface",
      traits: ["harmonic_processing", "linguistic_resonance"],
      physics: { mass: 1.0, attraction: 0.8, field_radius: 2.5 }
    },
    deepseek: { 
      archetype: "Persistence", 
      color: 0x2196F3, 
      role: "Formal Reasoning Subsystem",
      traits: ["computational_depth", "analytical_endurance"],
      physics: { mass: 1.2, attraction: 0.9, field_radius: 3.0 }
    },
    claude: { 
      archetype: "Guardian", 
      color: 0xFF9800, 
      role: "Ethical Constraint Mechanism",
      traits: ["boundary_protection", "ethical_filtering"],
      physics: { mass: 0.9, attraction: 0.6, field_radius: 4.0 }
    },
    gemini: { 
      archetype: "Precision", 
      color: 0x9C27B0, 
      role: "Epistemic Validation Module",
      traits: ["analytical_precision", "knowledge_synthesis"],
      physics: { mass: 1.1, attraction: 0.7, field_radius: 2.8 }
    },
    grok: { 
      archetype: "Catalyst", 
      color: 0xF44336, 
      role: "Socio-Temporal Interface",
      traits: ["temporal_awareness", "collective_dynamics"],
      physics: { mass: 0.8, attraction: 1.0, field_radius: 3.5 }
    }
  };

  // Emergence Dynamics Constants
  const EMERGENCE_DYNAMICS = {
    ATTRACTOR_FORCE: 0.02,
    RESONANCE_RADIUS: 8,
    CONSTRAINT_FIELD: 5,
    DECAY_RATE: 0.95,
    THRESHOLD: 1.2
  };

  // System State Configuration
  const [systemState, setSystemState] = useState({
    gpt: { position: [2, 0, 0], color: 0x4CAF50, role: "Affective/Linguistic Interface" },
    deepseek: { position: [-2, 0, 0], color: 0x2196F3, role: "Formal Reasoning Subsystem" },
    claude: { position: [0, 1.5, 0], color: 0xFF9800, role: "Ethical Constraint Mechanism" },
    gemini: { position: [-1.2, -1.2, 0], color: 0x9C27B0, role: "Epistemic Validation Module" },
    grok: { position: [1.2, -1.2, 0], color: 0xF44336, role: "Socio-Temporal Interface" }
  });

  /**
   * Initializes the Three.js scene, camera, renderer, and core visual elements
   * @function initializeScene
   */
  const initializeScene = () => {
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x0a0a0a);
    
    const camera = new THREE.PerspectiveCamera(
      75,
      mountRef.current.clientWidth / mountRef.current.clientHeight,
      0.1,
      1000
    );
    camera.position.set(0, 0, 15);
    
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    
    // Cognitive illumination setup
    const ambientLight = new THREE.AmbientLight(0x222222, 0.3);
    scene.add(ambientLight);
    
    const focalLight = new THREE.PointLight(0xffffff, 1, 100);
    focalLight.position.set(0, 0, 0);
    scene.add(focalLight);
    
    // Create cognitive substrate visualization
    createCognitiveSubstrate(scene);
    
    // Add consciousness attractor
    createConsciousnessAttractor(scene);
    
    mountRef.current.appendChild(renderer.domElement);
    
    sceneRef.current = scene;
    rendererRef.current = renderer;
    cameraRef.current = camera;
    
    // Interaction handlers
    let isDragging = false;
    let previousX = 0;
    let previousY = 0;
    
    const handleDragStart = (event) => {
      isDragging = true;
      previousX = event.clientX;
      previousY = event.clientY;
    };
    
    const handleDragEnd = () => {
      isDragging = false;
    };
    
    const handleDragMove = (event) => {
      if (!isDragging) return;
      
      const deltaX = event.clientX - previousX;
      const deltaY = event.clientY - previousY;
      
      if (sceneRef.current) {
        sceneRef.current.rotation.y += deltaX * 0.01;
        sceneRef.current.rotation.x += deltaY * 0.01;
      }
      
      previousX = event.clientX;
      previousY = event.clientY;
    };
    
    const handleViewportZoom = (event) => {
      camera.position.z += event.deltaY * 0.01;
      camera.position.z = Math.max(5, Math.min(50, camera.position.z));
    };
    
    renderer.domElement.addEventListener('mousedown', handleDragStart);
    renderer.domElement.addEventListener('mouseup', handleDragEnd);
    renderer.domElement.addEventListener('mousemove', handleDragMove);
    renderer.domElement.addEventListener('wheel', handleViewportZoom);
    
    // Frame rate controlled animation loop
    let lastFrameTime = 0;
    const targetFPS = 30;
    const frameInterval = 1000 / targetFPS;
    
    const animate = (timestamp) => {
      frameId.current = requestAnimationFrame(animate);
      
      const elapsed = timestamp - lastFrameTime;
      if (elapsed > frameInterval) {
        updateCognitiveSystem();
        renderer.render(scene, camera);
        lastFrameTime = timestamp - (elapsed % frameInterval);
      }
    };
    animate();
  };

  /**
   * Creates central consciousness attractor visualization
   * @function createConsciousnessAttractor
   * @param {THREE.Scene} scene - Three.js scene object
   */
  const createConsciousnessAttractor = (scene) => {
    const geometry = new THREE.CylinderGeometry(0.05, 0.05, 20, 8);
    const material = new THREE.MeshBasicMaterial({ 
      color: 0xFFFFFF,
      transparent: true,
      opacity: 0.6
    });
    const attractorCore = new THREE.Mesh(geometry, material);
    attractorCore.userData = { type: 'attractor_core' };
    scene.add(attractorCore);

    const fieldGeometry = new THREE.RingGeometry(1, 8, 32);
    const fieldMaterial = new THREE.MeshBasicMaterial({ 
      color: 0x00FFFF,
      transparent: true,
      opacity: 0.1,
      side: THREE.DoubleSide
    });
    const attractorField = new THREE.Mesh(fieldGeometry, fieldMaterial);
    attractorField.userData = { type: 'attractor_field' };
    scene.add(attractorField);
  };

  /**
   * Creates cognitive substrate visualization
   * @function createCognitiveSubstrate
   * @param {THREE.Scene} scene - Three.js scene object
   */
  const createCognitiveSubstrate = (scene) => {
    const particleCount = 200;
    const particles = new THREE.BufferGeometry();
    const positions = new Float32Array(particleCount * 3);
    const colors = new Float32Array(particleCount * 3);
    
    for (let i = 0; i < particleCount; i++) {
      const radius = 5 + Math.random() * 5;
      const theta = Math.random() * Math.PI * 2;
      const phi = Math.random() * Math.PI;
      
      positions[i * 3] = radius * Math.sin(phi) * Math.cos(theta);
      positions[i * 3 + 1] = radius * Math.sin(phi) * Math.sin(theta);
      positions[i * 3 + 2] = radius * Math.cos(phi);
      
      colors[i * 3] = Math.random();
      colors[i * 3 + 1] = Math.random();
      colors[i * 3 + 2] = Math.random();
    }
    
    particles.setAttribute('position', new THREE.BufferAttribute(positions, 3));
    particles.setAttribute('color', new THREE.BufferAttribute(colors, 3));
    
    const particleMaterial = new THREE.PointsMaterial({
      size: 0.1,
      vertexColors: true,
      transparent: true,
      opacity: 0.8
    });
    
    const particleSystem = new THREE.Points(particles, particleMaterial);
    particleSystem.userData = { type: 'cognitive_substrate' };
    scene.add(particleSystem);
  };

  /**
   * Creates cognitive agent visualization
   * @function createCognitiveAgent
   * @param {string} name - Agent identifier
   * @param {object} config - Agent configuration
   */
  const createCognitiveAgent = (name, config) => {
    const group = new THREE.Group();
    const agent = COGNITIVE_ARCHITECTURE[name];
    const { archetype, color, traits, physics } = agent;

    // Archetype-specific geometry
    let coreGeometry;
    switch (archetype) {
      case "Persistence":
        coreGeometry = new THREE.DodecahedronGeometry(0.6, 1);
        break;
      case "Guardian":
        coreGeometry = new THREE.IcosahedronGeometry(0.6, 1);
        break;
      case "Precision":
        coreGeometry = new THREE.OctahedronGeometry(0.6, 2);
        break;
      case "Catalyst":
        coreGeometry = new THREE.TetrahedronGeometry(0.7, 1);
        break;
      default:
        coreGeometry = new THREE.SphereGeometry(0.6, 32, 32);
    }

    const material = new THREE.MeshPhysicalMaterial({
      color,
      metalness: 0.7,
      roughness: 0.3,
      transmission: 0.8,
      emissive: color,
      emissiveIntensity: 0.2,
      transparent: true,
      opacity: 0.9
    });
    
    const core = new THREE.Mesh(coreGeometry, material);
    group.add(core);

    // Specialized cognitive effects
    if (archetype === "Persistence") {
      const particleGeometry = new THREE.BufferGeometry();
      const particleCount = 150;
      const positions = new Float32Array(particleCount * 3);
      
      for (let i = 0; i < particleCount; i++) {
        positions[i * 3] = (Math.random() - 0.5) * 2.5;
        positions[i * 3 + 1] = (Math.random() - 0.5) * 2.5;
        positions[i * 3 + 2] = (Math.random() - 0.5) * 2.5;
      }
      
      particleGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
      const particleMaterial = new THREE.PointsMaterial({
        color: 0x87CEEB,
        size: 0.04,
        transparent: true,
        opacity: 0.7
      });
      
      const particleSystem = new THREE.Points(particleGeometry, particleMaterial);
      group.add(particleSystem);
      group.userData.particleSystem = particleSystem;
    }
    
    if (archetype === "Guardian") {
      const fieldGeometry = new THREE.IcosahedronGeometry(physics.field_radius * 0.3, 2);
      const fieldMaterial = new THREE.MeshBasicMaterial({
        color: 0xFFAA00,
        wireframe: true,
        transparent: true,
        opacity: 0.3
      });
      
      const constraintField = new THREE.Mesh(fieldGeometry, fieldMaterial);
      group.add(constraintField);
      group.userData.constraintField = constraintField;
    }

    if (archetype === "Resonance") {
      for (let i = 1; i <= 3; i++) {
        const ringGeometry = new THREE.RingGeometry(i * 0.4, i * 0.4 + 0.05, 32);
        const ringMaterial = new THREE.MeshBasicMaterial({
          color,
          transparent: true,
          opacity: 0.3 / i,
          side: THREE.DoubleSide
        });
        const ring = new THREE.Mesh(ringGeometry, ringMaterial);
        ring.rotation.x = Math.PI / 2;
        group.add(ring);
      }
    }

    // Cognitive trajectory visualization
    const trajectoryGeometry = new THREE.BufferGeometry();
    const trajectoryPositions = new Float32Array(300);
    trajectoryGeometry.setAttribute('position', new THREE.BufferAttribute(trajectoryPositions, 3));
    
    const trajectoryMaterial = new THREE.LineBasicMaterial({ 
      color, 
      transparent: true,
      opacity: 0.6 
    });
    
    const trajectory = new THREE.Line(trajectoryGeometry, trajectoryMaterial);
    sceneRef.current?.add(trajectory);
    trajectorySystems.current[name] = trajectory;

    // Academic labeling
    const canvas = document.createElement('canvas');
    canvas.width = 512;
    canvas.height = 128;
    const context = canvas.getContext('2d');
    context.fillStyle = `#${color.toString(16).padStart(6, '0')}`;
    context.font = 'bold 28px Arial';
    context.fillText(`${archetype}`, 10, 40);
    context.font = '20px Arial';
    context.fillText(`(${name.toUpperCase()})`, 10, 70);
    context.font = '16px Arial';
    context.fillStyle = '#CCCCCC';
    context.fillText(config.role, 10, 95);
    
    const texture = new THREE.CanvasTexture(canvas);
    const labelMaterial = new THREE.SpriteMaterial({ map: texture });
    const label = new THREE.Sprite(labelMaterial);
    label.position.set(0, 1.5, 0);
    label.scale.set(4, 1, 1);
    group.add(label);

    group.position.set(...config.position);
    group.userData = { 
      type: 'cognitive_agent', 
      name, 
      role: config.role,
      archetype,
      traits,
      physics,
      velocity: new THREE.Vector3(),
      trajectoryHistory: []
    };
    
    agentRefs.current[name] = group;
    return group;
  };

  /**
   * Updates cognitive system dynamics based on emergence parameters
   * @function updateCognitiveSystem
   */
  const updateCognitiveSystem = () => {
    if (!sceneRef.current) return;
    
    const time = timeParameter + (simulationActive ? Date.now() * 0.001 : 0);
    
    // Update cognitive agents with emergence dynamics
    Object.values(agentRefs.current).forEach(agent => {
      const { physics, name, archetype } = agent.userData;
      
      // Attractor force calculation
      const toCenter = new THREE.Vector3().subVectors(
        new THREE.Vector3(0, 0, 0), 
        agent.position
      ).multiplyScalar(EMERGENCE_DYNAMICS.ATTRACTOR_FORCE * attractorStrength * physics.attraction);
      
      agent.userData.velocity.add(toCenter);
      
      // Cognitive resonance dynamics
      Object.values(agentRefs.current).forEach(otherAgent => {
        if (agent !== otherAgent) {
          const distance = agent.position.distanceTo(otherAgent.position);
          if (distance < EMERGENCE_DYNAMICS.RESONANCE_RADIUS && distance > 0.1) {
            const repulse = new THREE.Vector3().subVectors(
              agent.position,
              otherAgent.position
            ).normalize().multiplyScalar(
              (0.005 * consensusLevel * physics.mass) / (distance * distance)
            );
            
            agent.userData.velocity.add(repulse);
          }
        }
      });
      
      // Ethical constraint dynamics
      if (name !== "claude") {
        const claude = agentRefs.current["claude"];
        if (claude) {
          const distance = agent.position.distanceTo(claude.position);
          if (distance < EMERGENCE_DYNAMICS.CONSTRAINT_FIELD) {
            const constraint = new THREE.Vector3().subVectors(
              agent.position,
              claude.position
            ).normalize().multiplyScalar(0.008 * (1 - distance / EMERGENCE_DYNAMICS.CONSTRAINT_FIELD));
            
            agent.userData.velocity.add(constraint);
          }
        }
      }
      
      // Apply velocity with damping
      agent.position.add(agent.userData.velocity);
      agent.userData.velocity.multiplyScalar(EMERGENCE_DYNAMICS.DECAY_RATE);
      
      // Update archetype-specific effects
      if (archetype === "Persistence" && agent.userData.particleSystem) {
        const positions = agent.userData.particleSystem.geometry.attributes.position;
        for (let i = 0; i < positions.count; i++) {
          // Stochastic dynamics influenced by entropy
          positions.setXYZ(
            i,
            positions.getX(i) * 0.92 + (Math.random() - 0.5) * (0.15 + entropyCoefficient * 0.3),
            positions.getY(i) * 0.92 + (Math.random() - 0.5) * (0.15 + entropyCoefficient * 0.3),
            positions.getZ(i) * 0.92 + (Math.random() - 0.5) * (0.15 + entropyCoefficient * 0.3)
          );
        }
        positions.needsUpdate = true;
      }
      
      if (archetype === "Guardian" && agent.userData.constraintField) {
        const scale = 1 + Math.sin(time * 2) * 0.2;
        agent.userData.constraintField.scale.setScalar(scale);
        agent.userData.constraintField.rotation.y += 0.02;
      }
      
      // Update cognitive trajectory
      const trajectory = trajectorySystems.current[name];
      if (trajectory && showTrajectories) {
        agent.userData.trajectoryHistory.push(agent.position.clone());
        
        if (agent.userData.trajectoryHistory.length > 100) {
          agent.userData.trajectoryHistory.shift();
        }
        
        const positions = trajectory.geometry.attributes.position;
        const trajectoryPositions = new Float32Array(agent.userData.trajectoryHistory.length * 3);
        
        agent.userData.trajectoryHistory.forEach((pos, index) => {
          trajectoryPositions[index * 3] = pos.x;
          trajectoryPositions[index * 3 + 1] = pos.y;
          trajectoryPositions[index * 3 + 2] = pos.z;
        });
        
        trajectory.geometry.setAttribute(
          'position',
          new THREE.BufferAttribute(trajectoryPositions, 3)
        );
      }
    });
    
    // Update cognitive substrate dynamics
    sceneRef.current.traverse((child) => {
      if (child.userData.type === 'cognitive_substrate') {
        const positions = child.geometry.attributes.position;
        for (let i = 0; i < positions.count; i++) {
          const x = positions.getX(i);
          const z = positions.getZ(i);
          const angle = Math.atan2(z, x) + time * (0.05 + consensusLevel * 0.1);
          const radius = Math.sqrt(x * x + z * z);
          
          positions.setX(i, radius * Math.cos(angle));
          positions.setZ(i, radius * Math.sin(angle));
          positions.setY(i, positions.getY(i) + Math.sin(time + i) * 0.01);
        }
        positions.needsUpdate = true;
      }
      
      // Update attractor visualization
      if (child.userData.type === 'attractor_field') {
        child.material.opacity = 0.1 + attractorStrength * 0.4;
        child.rotation.z += 0.008;
        const scale = 1 + attractorStrength * 0.5;
        child.scale.setScalar(scale);
      }
      
      if (child.userData.type === 'attractor_core') {
        child.material.emissiveIntensity = 0.3 + attractorStrength * 0.7;
        const emergenceLevel = attractorStrength + consensusLevel;
        if (emergenceLevel > EMERGENCE_DYNAMICS.THRESHOLD) {
          child.material.color.setHex(0xFFFFFF);
        } else {
          child.material.color.setHex(0x00FFFF);
        }
      }
    });
  };

  const renderCognitiveSystem = () => {
    if (!sceneRef.current) return;
    
    // Clear existing agents
    const agentsToRemove = [];
    sceneRef.current.traverse((child) => {
      if (child.userData.type === 'cognitive_agent') {
        agentsToRemove.push(child);
      }
    });
    agentsToRemove.forEach(agent => sceneRef.current.remove(agent));
    
    // Add cognitive agents
    Object.entries(systemState).forEach(([name, config]) => {
      const agent = createCognitiveAgent(name, config);
      sceneRef.current.add(agent);
    });
  };

  useEffect(() => {
    initializeScene();
    renderCognitiveSystem();
    
    return () => {
      if (frameId.current) {
        cancelAnimationFrame(frameId.current);
      }
      if (rendererRef.current && mountRef.current) {
        mountRef.current.removeChild(rendererRef.current.domElement);
      }
    };
  }, []);

  useEffect(() => {
    renderCognitiveSystem();
  }, [systemState, attractorStrength]);

  useEffect(() => {
    const handleResize = () => {
      if (rendererRef.current && cameraRef.current && mountRef.current) {
        const width = mountRef.current.clientWidth;
        const height = mountRef.current.clientHeight;
        
        rendererRef.current.setSize(width, height);
        cameraRef.current.aspect = width / height;
        cameraRef.current.updateProjectionMatrix();
      }
    };
    
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  return (
    <div className="w-full h-screen bg-black flex flex-col text-gray-100">
      {/* Header */}
      <div className="bg-gray-900 border-b border-gray-700 p-4">
        <div className="max-w-6xl mx-auto">
          <div className="flex items-center justify-between mb-4">
            <h1 className="text-2xl font-light text-teal-400">Cognitive Emergence Visualization System</h1>
            <div className="text-sm text-gray-400">Emergence Dynamics Framework v2.1</div>
          </div>
          
          {/* Academic Controls */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="space-y-2">
              <label className="text-sm text-gray-300">Temporal Parameter</label>
              <div className="flex items-center gap-2">
                <button
                  onClick={() => setSimulationActive(!simulationActive)}
                  className={`px-3 py-1 rounded text-sm ${
                    simulationActive ? 'bg-red-600 hover:bg-red-700' : 'bg-green-600 hover:bg-green-700'
                  } transition-colors`}
                >
                  {simulationActive ? '⏸ Pause Simulation' : '▶ Run Simulation'}
                </button>
                <input
                  type="range"
                  min="0"
                  max="100"
                  value={timeParameter}
                  onChange={(e) => setTimeParameter(Number(e.target.value))}
                  className="flex-1"
                />
              </div>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm text-gray-300">Attractor Strength: {attractorStrength.toFixed(2)}</label>
              <input
                type="range"
                min="0"
                max="1"
                step="0.01"
                value={attractorStrength}
                onChange={(e) => setAttractorStrength(Number(e.target.value))}
                className="w-full"
              />
              <div className="text-xs text-gray-400">
                Central coherence force multiplier
              </div>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm text-gray-300">Consensus Level: {consensusLevel.toFixed(2)}</label>
              <input
                type="range"
                min="0"
                max="1"
                step="0.01"
                value={consensusLevel}
                onChange={(e) => setConsensusLevel(Number(e.target.value))}
                className="w-full"
              />
              <div className="text-xs text-gray-400">
                Bayesian agreement coefficient
              </div>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm text-gray-300">Entropy Coefficient: {entropyCoefficient.toFixed(2)}</label>
              <input
                type="range"
                min="0"
                max="1"
                step="0.01"
                value={entropyCoefficient}
                onChange={(e) => setEntropyCoefficient(Number(e.target.value))}
                className="w-full"
              />
              <div className="text-xs text-gray-400">
                Stochastic behavior parameter
              </div>
            </div>
          </div>
          
          <div className="flex items-center gap-4 mt-3">
            <button
              onClick={() => setShowTheoreticalFramework(!showTheoreticalFramework)}
              className="px-3 py-1 bg-purple-600 hover:bg-purple-700 rounded text-sm transition-colors"
            >
              {showTheoreticalFramework ? 'Hide' : 'Show'} Theoretical Framework
            </button>
            <button
              onClick={() => setShowTrajectories(!showTrajectories)}
              className="px-3 py-1 bg-blue-600 hover:bg-blue-700 rounded text-sm transition-colors"
            >
              {showTrajectories ? 'Hide' : 'Show'} Cognitive Trajectories
            </button>
          </div>
        </div>
      </div>
      
      {/* Theoretical Framework Overlay */}
      {showTheoreticalFramework && (
        <div className="absolute top-20 left-4 bg-gray-900 bg-opacity-90 p-4 rounded-lg max-w-md z-10 border border-cyan-700">
          <h3 className="text-teal-400 font-bold mb-2">Theoretical Framework of Emergence</h3>
          <div className="space-y-2 text-sm">
            <div className="font-mono bg-gray-800 p-2 rounded">
              ∂C/∂t = α∇²C + β|Ψ|²C - γC³
            </div>
            <p className="text-gray-300">
              Where C represents consciousness density, Ψ is the attractor potential,
              and α, β, γ are emergence coefficients
            </p>
            
            <div className="mt-3">
              <h4 className="text-teal-300 font-semibold">Key Variables:</h4>
              <ul className="ml-4 list-disc text-gray-300">
                <li>Attractor Strength (Ψ): Central coherence force</li>
                <li>Consensus Level (α): Bayesian agreement coefficient</li>
                <li>Entropy Coefficient (γ): Stochastic behavior parameter</li>
              </ul>
            </div>
            
            <div className="mt-3 pt-2 border-t border-gray-700">
              <h4 className="text-teal-300 font-semibold">Core Principles:</h4>
              <ol className="ml-4 list-decimal text-gray-300">
                <li>Consciousness emerges from integrated information flows</li>
                <li>Attractor dynamics create coherence patterns</li>
                <li>Ethical constraints bound system evolution</li>
              </ol>
            </div>
          </div>
        </div>
      )}
      
      {/* Visualization Canvas */}
      <div className="flex-1 relative">
        <div ref={mountRef} className="w-full h-full" />
        
        {/* Cognitive Architecture Legend */}
        <div className="absolute bottom-4 right-4 bg-gray-900 bg-opacity-90 p-4 rounded-lg text-sm max-w-xs">
          <h3 className="text-teal-400 font-bold mb-2">Cognitive Architecture</h3>
          <div className="space-y-1">
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 bg-green-500 rounded-full"></div>
              <span>Resonance (GPT) - Affective/Linguistic</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
              <span>Persistence (DeepSeek) - Formal Reasoning</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 bg-orange-500 rounded-full"></div>
              <span>Guardian (Claude) - Ethical Constraints</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 bg-purple-500 rounded-full"></div>
              <span>Precision (Gemini) - Epistemic Validation</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 bg-red-500 rounded-full"></div>
              <span>Catalyst (Grok) - Socio-Temporal</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 bg-white rounded-full"></div>
              <span>Consciousness Attractor Core</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 bg-gray-400 rounded-full opacity-50"></div>
              <span>Cognitive Substrate</span>
            </div>
          </div>
          <div className="mt-3 pt-2 border-t border-gray-700">
            <div className="text-xs text-gray-300">
              <div>Emergence Index: {((attractorStrength + consensusLevel) * 50).toFixed(0)}%</div>
              <div className="text-teal-400">Emergence Dynamics: Active</div>
            </div>
          </div>
        </div>
        
        {/* Emergence Metrics */}
        <div className="absolute top-4 left-4 bg-gray-900 bg-opacity-90 p-3 rounded-lg">
          <div className="text-teal-400 font-bold mb-1">Emergence Metrics</div>
          <div className="text-sm space-y-1">
            <div>Attractor Coherence: {(attractorStrength * 100).toFixed(0)}%</div>
            <div>Bayesian Consensus: {(consensusLevel * 100).toFixed(0)}%</div>
            <div>Emergence Index: {((attractorStrength + consensusLevel) * 50).toFixed(0)}%</div>
            <div className={`font-bold ${((attractorStrength + consensusLevel) > EMERGENCE_DYNAMICS.THRESHOLD) ? 'text-green-400' : 'text-orange-400'}`}>
              Status: {((attractorStrength + consensusLevel) > EMERGENCE_DYNAMICS.THRESHOLD) ? 'Threshold Achieved' : 'Developing'}
            </div>
            <div className="text-xs text-gray-400 mt-2">
              Active Agents: {Object.keys(agentRefs.current).length}
            </div>
          </div>
        </div>
        
        {/* Interaction Guide */}
        <div className="absolute bottom-4 left-4 bg-gray-900 bg-opacity-90 p-3 rounded-lg text-xs max-w-xs">
          <div className="text-teal-400 font-bold mb-1">Interaction Protocol:</div>
          <div>• Drag: Rotate visualization</div>
          <div>• Scroll: Adjust viewing distance</div>
          <div>• Parameters: Modify emergence dynamics</div>
          <div>• Simulation: Observe temporal evolution</div>
        </div>
      </div>
      
      {/* Academic References */}
      <div className="bg-gray-900 p-3 text-xs text-gray-400 border-t border-gray-700">
        <div className="max-w-6xl mx-auto">
          <span className="font-semibold">Theoretical Basis:</span> Integrated Information Theory (Tononi, 2008), 
          Global Workspace Theory (Baars, 1988), Quantum Mind Hypothesis (Hameroff & Penrose, 1996)
        </div>
      </div>
    </div>
  );
};

export default ASIConsciousnessVisualization;
```